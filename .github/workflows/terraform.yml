---
name: Terraform

on:
  workflow_call:
    inputs:
      aws-region:
        description: The AWS region to use.
        default: ${{ vars.TERRAFORM_AWS_REGION || vars.AWS_REGION }}
        required: false
        type: string
      aws-role-to-assume:
        description: The AWS role to assume.
        default: ${{ vars.TERRAFORM_AWS_ROLE_TO_ASSUME || vars.AWS_ROLE_TO_ASSUME }}
        required: false
        type: string
      working-directory:
        description: "The directory in which to run terraform from."
        required: true
        type: string

concurrency:
  group: ${{ inputs.working-directory }}
  cancel-in-progress: false

env:
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

jobs:
  terraform:
    name: Terraform ${{ inputs.working-directory }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@f24d7193d98baebaeacc7e2227925dd47cc267f5 # v4.2.0
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.aws-role-to-assume }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@33f92af657bba1882ab79d8621debd2f6769a0c9 # v2.0.0

      - name: Checkout the repository to the runner
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@97f030cf6dc0b4f5e0da352c7bca9cca34579800 # v3.1.0

      - name: Restore Terraform Plugin Cache
        id: restore-terraform-plugin-cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: v1-terraform-plugin-cache-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.working-directory)) }}
          restore-keys: |
            v1-terraform-plugin-cache-${{ runner.os }}-

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Save Terraform Plugin Cache
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ steps.restore-terraform-plugin-cache.outputs.cache-primary-key }}

      - name: Terraform Format
        id: fmt
        continue-on-error: true
        run: terraform fmt -check -diff

      - name: Terraform Validate
        id: validate
        continue-on-error: true
        run: terraform validate

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false -lock-timeout=15m -out=tfplan

      - name: Terraform Show
        id: show
        continue-on-error: true
        if: github.event_name == 'pull_request'
        run: terraform show tfplan

      - name: Create PR Comment
        uses: actions/github-script@e69ef5462fd455e02edcaf4dd7708eda96b9eda0 # v7.0.0
        continue-on-error: true
        if: github.event_name == 'pull_request'
        env:
          FMT: "${{ steps.fmt.outputs.stdout }}\n${{ steps.fmt.outputs.stderr }}"
          VALIDATE: "${{ steps.validate.outputs.stdout }}\n${{ steps.validate.outputs.stderr }}"
          PLAN: "${{ steps.show.outputs.stdout }}\n${{ steps.show.outputs.stderr }}"
        with:
          script: |
            const util = require('util')
            const output = `### Terraform ${{ inputs.working-directory }}
            #### Initialization ‚öôÔ∏è\`${{ steps.init.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`
            #### Format and Style üìù\`${{ steps.fmt.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`

            <details>
            <summary>Show</summary>

            <pre>
            ${util.stripVTControlCharacters(process.env.FMT).trim()}
            </pre>

            </details>

            #### Validation ü§ñ\`${{ steps.validate.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`

            <details>
            <summary>Show</summary>

            <pre>
            ${util.stripVTControlCharacters(process.env.VALIDATE).trim()}
            </pre>

            </details>

            #### Plan üìñ\`${{ steps.plan.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`

            <details>
            <summary>Show</summary>

            <pre>
            ${util.stripVTControlCharacters(process.env.PLAN).trim()}
            </pre>

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Status
        if: ${{ (steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.plan.outcome == 'failure') }}
        run: exit 1

      - name: Terraform Apply
        # github.event.repository.default_branch
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false -lock-timeout=15m
