---
name: Terraform

on:
  workflow_call:
    inputs:
      aws-region:
        description: The AWS region to use.
        default: ${{ vars.TERRAFORM_AWS_REGION || vars.AWS_REGION }}
        required: false
        type: string
      aws-role-to-assume:
        description: The AWS role to assume.
        default: ${{ vars.TERRAFORM_AWS_ROLE_TO_ASSUME || vars.AWS_ROLE_TO_ASSUME }}
        required: false
        type: string
      working-directory:
        description: "The directory in which to run terraform from."
        required: true
        type: string

concurrency:
  group: ${{ inputs.working-directory }}
  cancel-in-progress: false

env:
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

jobs:
  terraform:
    name: Terraform ${{ inputs.working-directory }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # ratchet:aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.aws-role-to-assume }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # ratchet:aws-actions/amazon-ecr-login@v2.0.1

      - name: Checkout the repository to the runner
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # ratchet:actions/checkout@v5.0.0

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # ratchet:hashicorp/setup-terraform@v3.1.2

      - name: Restore Terraform Plugin Cache
        id: restore-terraform-plugin-cache
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # ratchet:actions/cache/restore@v4.2.4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: v1-terraform-plugin-cache-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.working-directory)) }}
          restore-keys: |
            v1-terraform-plugin-cache-${{ runner.os }}-

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Save Terraform Plugin Cache
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # ratchet:actions/cache/save@v4.2.4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ steps.restore-terraform-plugin-cache.outputs.cache-primary-key }}

      - name: Terraform Format
        id: fmt
        continue-on-error: true
        run: terraform fmt -check -diff

      - name: Terraform Validate
        id: validate
        continue-on-error: true
        run: terraform validate

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false -lock-timeout=15m -out=tfplan

      - name: Terraform Show
        id: show
        continue-on-error: true
        if: github.event_name == 'pull_request'
        run: terraform show tfplan

      - name: Create PR Comment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # ratchet:actions/github-script@v7.0.1
        continue-on-error: true
        if: github.event_name == 'pull_request'
        env:
          FMT: "${{ steps.fmt.outputs.stdout }}\n${{ steps.fmt.outputs.stderr }}"
          VALIDATE: "${{ steps.validate.outputs.stdout }}\n${{ steps.validate.outputs.stderr }}"
          PLAN: "${{ steps.show.outputs.stdout }}\n${{ steps.show.outputs.stderr }}"
        with:
          script: |
            const util = require('util')
            const output = `### Terraform ${{ inputs.working-directory }}
            #### Initialization ‚öôÔ∏è\`${{ steps.init.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`
            #### Format and Style üìù\`${{ steps.fmt.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`

            <details>
            <summary>Show</summary>

            <pre>
            ${util.stripVTControlCharacters(process.env.FMT).trim()}
            </pre>

            </details>

            #### Validation ü§ñ\`${{ steps.validate.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`

            <details>
            <summary>Show</summary>

            <pre>
            ${util.stripVTControlCharacters(process.env.VALIDATE).trim()}
            </pre>

            </details>

            #### Plan üìñ\`${{ steps.plan.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`

            <details>
            <summary>Show</summary>

            <pre>
            ${util.stripVTControlCharacters(process.env.PLAN).trim()}
            </pre>

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Status
        if: ${{ (steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.plan.outcome == 'failure') }}
        run: exit 1

      - name: Terraform Apply
        # github.event.repository.default_branch
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false -lock-timeout=15m
